{
  "name": "gitworkspace",
  "displayName": "Git Workspace",
  "description": "A convenient Git-based file explorer that displays (1) currently changed files, and (2) ALL files ever modified by the current branch (since its creation!) for one or more Git repositories.",
  "publisher": "daveWasTaken",
  "version": "1.1.4",
  "keywords": ["git", "workspace", "branch", "file", "explorer"],
  "license": "SEE LICENSE IN LICENSE.txt",
  "icon": "resources/folder-git.png",
  "homepage": "https://github.com/DaveWasTakn/GitWorkspace",
  "repository": {
    "type": "git",
    "url": "https://github.com/DaveWasTakn/GitWorkspace"
  },
  "sponsor": {
    "url": "https://buymeacoffee.com/davewastakn"
  },
  "engines": {
    "vscode": "^1.77.0"
  },
  "categories": [
    "SCM Providers",
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "gitWorkspace_container_files.reset",
        "title": "Reset Cached Repository Information"
      },
      {
        "command": "gitWorkspace_container_files.refreshEntry",
        "title": "Refresh",
        "icon": {
          "light": "resources/refresh.png",
          "dark": "resources/refresh_white.png"
        }
      },
      {
        "command": "gitWorkspace.onClickTreeItem",
        "title": "open"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "gitWorkspace_container",
          "title": "gitWorkspace",
          "icon": "resources/workspace.png"
        }
      ]
    },
    "views": {
      "gitWorkspace_container": [
        {
          "id": "gitWorkspace_container_files",
          "name": "files"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "gitWorkspace_container_files.refreshEntry",
          "when": "view == gitWorkspace_container_files",
          "group": "navigation"
        },
        {
          "command": "gitWorkspace_container_files.reset",
          "when": "view == gitWorkspace_container_files"
        }
      ]
    },
    "configuration": {
      "title": "Git Workspace",
      "properties": {
        "gitWorkspace.path_to_repository": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The paths to the desired git repositories.\n\nPlease provide absolute paths using the correct format for your operating system: For Windows paths should start with a drive letter like 'C:' and can use either backslashes ('\\') or forward slashes ('/'). On Unix-like systems (Linux, macOS and WSL), use forward slashes ('/').",
          "markdownDescription": "**The paths to the desired git repositories.**\n\n_Please provide absolute paths using the correct format for your operating system: For Windows paths should start with a drive letter like `C:` and can use either backslashes (`\\`) or forward slashes (`/`). On Unix-like systems (Linux, macOS and WSL), use forward slashes (`/`)._",
          "order": 0
        },
        "gitWorkspace.path_to_git_executable": {
          "type": "string",
          "description": "OPTIONAL: Path to a specific git executable. If none is provided, the extension will try to use the one found in your PATH.\n\nPlease provide absolute paths using the correct format for your operating system: For Windows paths should start with a drive letter like 'C:' and can use either backslashes ('\\') or forward slashes ('/'). On Unix-like systems (Linux, macOS and WSL), use forward slashes ('/').",
          "markdownDescription": "**_OPTIONAL_**: **Path to a specific git executable.** If none is provided, the extension will try to use the one found in your PATH.\n\n_Please provide an absolute path using the correct format for your operating system: For Windows paths should start with a drive letter like `C:` and can use either backslashes (`\\`) or forward slashes (`/`). On Unix-like systems (Linux, macOS and WSL), use forward slashes (`/`)._",
          "order": 1
        },
        "gitWorkspace.useFileWatchers": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic view updates when files in the specified repositories are created, changed, or deleted.",
          "markdownDescription": "Enable automatic view updates when files in the specified repositories are created, changed, or deleted.",
          "order": 2
        },
        "gitWorkspace.customWorkflows": {
          "type": "object",
          "default": {
            "commit": [
              "git add --all",
              "git commit -m \"<<<commit message>>>\""
            ],
            "commit + push": [
              "git add --all",
              "git commit -m \"<<<commit message>>>\"",
              "git push"
            ],
            "commit with branchname": [
              "git add --all",
              "git commit -m \"<<<$REPOSITORY_BRANCH_WITHOUT_PREFIX>>>\""
            ],
            "commit with branchname + push": [
              "git add --all",
              "git commit -m \"<<<$REPOSITORY_BRANCH_WITHOUT_PREFIX>>>\"",
              "git push"
            ]
          },
          "description": "Custom workflows that can be executed in a specific repository by clicking on it in the extension's explorer.\n\nA custom workflow is a set of commands that are executed in succession within the selected repository. Workflows are defined in your settings.json file, where each workflow has a name and a list of commands.\n\nPlaceholders can be included in your commands using the format <<<PLACEHOLDER NAME>>>. These will trigger a prompt asking the user to input a value when the workflow runs.\n\nExample: 'commit' workflow\nThis workflow stages all changes and commits them. It prompts the user to enter a commit message using the <<<commit message>>> placeholder:\n\n\"commit\": [\n  \"git add --all\",\n  \"git commit -m '<<<commit message>>>'\"\n]\n\nThe spawned terminal will use your preferred shell type set in the `terminal.integrated.defaultProfile` vscode settings, however, instead of PowerShell, the normal Command Prompt will be used on windows if the `useChainingForWorkflows` is enabled.",
          "markdownDescription": "**Custom Workflows that can be executed in a specific repository by clicking on it in the extension's explorer!**\n\nA custom workflow is a set of commands that are executed in succession within the selected repository. Workflows are defined in your `settings.json` file, where each workflow has a name and a list of commands.\n\nPlaceholders can be included in your commands using the format `<<<PLACEHOLDER NAME>>>`. These will trigger a prompt asking the user to input a value when the workflow runs.\n\n**Example: 'commit' workflow**\nThis workflow stages all changes and commits them. It prompts the user to enter a commit message using the `<<<commit message>>>` placeholder:\n\n```json\n\"commit\": [\n  \"git add --all\",\n  \"git commit -m '<<<commit message>>>'\"\n]\n```\n\n_The spawned terminal will use your preferred shell type set in the `terminal.integrated.defaultProfile` vscode settings, however, instead of PowerShell, the normal Command Prompt will be used on windows if the `useChainingForWorkflows` is enabled._",
          "order": 3
        },
        "gitWorkspace.useChainingForWorkflows": {
          "type": "boolean",
          "default": true,
          "description": "Whether to use the chaining operator ` && ` between the individual commands of a custom workflow. Leaving this option enabled is recommended, since it stops the execution of subsequent commands whenever a command fails!\n\nDisabling this option will execute each command of a selected workflow one by one, without being able to check whether the previous command completed successfully (This is a limitation of the VSCode API :/).\n\nNote, that since for **Windows PowerShell**, the chaining operator only works from version 7+, this extension will execute commands (on Windows) in the normal Command Prompt instead of PowerShell.\n\nTo change the default shell used by VSCode you can go to the settings and search for `terminal.integrated.defaultProfile`, then change it for your platform, e.g. on windows you need to change `terminal.integrated.defaultProfile.windows`.",
          "markdownDescription": "Whether to use the chaining operator ` && ` between the individual commands of a custom workflow. Leaving this option enabled is recommended, since it stops the execution of subsequent commands whenever a command fails!\n\nDisabling this option will execute each command of a selected workflow one by one, without being able to check whether the previous command completed successfully (This is a limitation of the VSCode API :/).\n\nNote, that since for **Windows PowerShell**, the chaining operator only works from version 7+, this extension will execute commands (on Windows) in the normal Command Prompt instead of PowerShell.\n\nTo change the default shell used by VSCode you can go to the settings and search for `terminal.integrated.defaultProfile`, then change it for your platform, e.g. on windows you need to change `terminal.integrated.defaultProfile.windows`.",
          "order": 4
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.77.0",
    "@typescript-eslint/eslint-plugin": "^5.56.0",
    "@typescript-eslint/parser": "^5.56.0",
    "@vscode/test-electron": "^2.3.0",
    "eslint": "^8.36.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "typescript": "^4.9.5"
  },
  "dependencies": {
  }
}
